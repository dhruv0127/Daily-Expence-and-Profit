"use strict";import CSVConverter from"../Converters/CSVConverter.js";import DataConnector from"./DataConnector.js";import U from"../../Core/Utilities.js";const merge=U["merge"];class CSVConnector extends DataConnector{constructor(e){e=merge(CSVConnector.defaultOptions,e);super(e),this.converter=new CSVConverter(e),(this.options=e).enablePolling&&this.startPolling(1e3*Math.max(e.dataRefreshRate||0,1))}load(t){const o=this,e=o.converter,r=o.table,{csv:a,csvURL:n}=o.options;if(a)r.deleteRows(),o.emit({type:"load",csv:a,detail:t,table:r}),e.parse({csv:a}),r.setColumns(e.getTable().getColumns()),o.emit({type:"afterLoad",csv:a,detail:t,table:r});else{if(n)return o.table.deleteColumns(),o.emit({type:"load",detail:t,table:o.table}),fetch(n||"").then(e=>e.text().then(e=>{o.converter.parse({csv:e}),o.table.setColumns(o.converter.getTable().getColumns()),o.emit({type:"afterLoad",csv:e,detail:t,table:o.table})})).catch(e=>(o.emit({type:"loadError",detail:t,error:e,table:o.table}),Promise.reject(e))).then(()=>o);o.emit({type:"loadError",detail:t,error:"Unable to load: no CSV string or URL was provided",table:r})}return Promise.resolve(o)}}CSVConnector.defaultOptions={csv:"",csvURL:"",enablePolling:!1,dataRefreshRate:1},DataConnector.registerType("CSV",CSVConnector);export default CSVConnector;