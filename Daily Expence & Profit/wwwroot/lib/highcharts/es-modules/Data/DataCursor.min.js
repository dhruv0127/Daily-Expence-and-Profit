"use strict";class DataCursor{constructor(t={}){this.emittingRegister=[],this.listenerMap={},this.stateMap=t}addListener(t,s,e){const r=this.listenerMap[t]=this.listenerMap[t]||{},i=r[s]=r[s]||[];return i.push(e),this}buildEmittingTag(t){return("position"===t.cursor.type?[t.table.id,t.cursor.column,t.cursor.row,t.cursor.state,t.cursor.type]:[t.table.id,t.cursor.columns,t.cursor.firstRow,t.cursor.lastRow,t.cursor.state,t.cursor.type]).join("\0")}emitCursor(s,e,r,i){const o=s.id,t=e.state,n=this.listenerMap[o]&&this.listenerMap[o][t];if(n){const a=this.stateMap[o]=this.stateMap[o]||{};let t=a[e.state];i&&(t=t||(a[e.state]=[]),-1===DataCursor.getIndex(e,t)&&t.push(e));const u={cursor:e,cursors:t||[],table:s},l=(r&&(u.event=r),this.emittingRegister),c=this.buildEmittingTag(u);if(0<=l.indexOf(c))return this;try{this.emittingRegister.push(c);for(let t=0,s=n.length;t<s;++t)n[t].call(this,u)}finally{i=this.emittingRegister.indexOf(c);0<=i&&this.emittingRegister.splice(i,1)}}return this}remitCursor(t,s){const e=this.stateMap[t]&&this.stateMap[t][s.state];return e&&0<=(t=DataCursor.getIndex(s,e))&&e.splice(t,1),this}removeListener(t,s,e){const r=this.listenerMap[t]&&this.listenerMap[t][s];return r&&(t=r.indexOf(e))&&r.splice(t,1),this}}!function(t){function i(t,s){var e;if("range"===t.type)return t;const r={type:"range",firstRow:null!=(e=null!=(e=t.row)?e:s&&s.firstRow)?e:0,lastRow:null!=(e=null!=(e=t.row)?e:s&&s.lastRow)?e:Number.MAX_VALUE,state:t.state};return void 0!==t.column&&(r.columns=[t.column]),r}t.getIndex=function(r,i){if("position"===r.type){for(let t,s=0,e=i.length;s<e;++s)if("position"===(t=i[s]).type&&t.state===r.state&&t.column===r.column&&t.row===r.row)return s}else{var o=JSON.stringify(r.columns);for(let t,s=0,e=i.length;s<e;++s)if("range"===(t=i[s]).type&&t.state===r.state&&t.firstRow===r.firstRow&&t.lastRow===r.lastRow&&JSON.stringify(t.columns)===o)return s}return-1},t.isEqual=function(t,s){return"position"===t.type&&"position"===s.type?t.column===s.column&&t.row===s.row&&t.state===s.state:"range"===t.type&&"range"===s.type&&(t.firstRow===s.firstRow&&t.lastRow===s.lastRow&&JSON.stringify(t.columns)===JSON.stringify(s.columns))},t.isInRange=function(t,s){"position"===s.type&&(s=i(s));const e=(t="position"===t.type?i(t,s):t).columns,r=s.columns;return t.firstRow>=s.firstRow&&t.lastRow<=s.lastRow&&(!e||!r||e.every(t=>0<=r.indexOf(t)))},t.toPositions=function(s){if("position"===s.type)return[s];var r=s.columns||[];const i=[];var o=s.state;for(let e=s.firstRow,t=s.lastRow;e<t;++e)if(r.length)for(let t=0,s=r.length;t<s;++t)i.push({type:"position",column:r[t],row:e,state:o});else i.push({type:"position",row:e,state:o});return i},t.toRange=i}(DataCursor=DataCursor||{});export default DataCursor;