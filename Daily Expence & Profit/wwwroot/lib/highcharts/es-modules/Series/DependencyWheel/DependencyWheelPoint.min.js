"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{sankey:{prototype:{pointClass:SankeyPoint}}}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const wrap=U["wrap"];class DependencyWheelPoint extends SankeyPoint{constructor(){super(...arguments),this.angle=void 0,this.fromNode=void 0,this.index=void 0,this.linksFrom=void 0,this.linksTo=void 0,this.options=void 0,this.series=void 0,this.shapeArgs=void 0,this.toNode=void 0}getDataLabelPath(e){const t=this.series.chart.renderer,a=this.shapeArgs,s=this.angle<0||this.angle>Math.PI,i=a.start||0,r=a.end||0;return this.dataLabelPath?(this.dataLabelPath=this.dataLabelPath.destroy(),delete this.dataLabelPath):wrap(e,"destroy",t=>(this.dataLabelPath&&(this.dataLabelPath=this.dataLabelPath.destroy()),t.call(e))),this.dataLabelPath=t.arc({open:!0,longArc:Math.abs(Math.abs(i)-Math.abs(r))<Math.PI?0:1}).attr({x:a.x,y:a.y,r:a.r+(this.dataLabel.options.distance||0),start:s?i:r,end:s?r:i,clockwise:+s}).add(t.defs),this.dataLabelPath}isValid(){return!0}}export default DependencyWheelPoint;