"use strict";import A from"../../Core/Animation/AnimationUtilities.js";const animObject=A["animObject"];import H from"../../Core/Globals.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:Series,seriesTypes:{scatter:ScatterSeries}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{arrayMax,extend,merge,pick}=U;class VectorSeries extends ScatterSeries{constructor(){super(...arguments),this.data=void 0,this.lengthMax=void 0,this.options=void 0,this.points=void 0}animate(t){t?this.markerGroup.attr({opacity:.01}):this.markerGroup.animate({opacity:1},animObject(this.options.animation))}arrow(t){var t=t.length/this.lengthMax*this.options.vectorLength/20,r={start:10*t,center:0,end:-10*t}[this.options.rotationOrigin]||0;return[["M",0,7*t+r],["L",-1.5*t,7*t+r],["L",0,10*t+r],["L",1.5*t,7*t+r],["L",0,7*t+r],["L",0,-10*t+r]]}drawPoints(){const i=this.chart;this.points.forEach(function(t){var r=t.plotX,e=t.plotY;!1===this.options.clip||i.isInsidePlot(r,e,{inverted:i.inverted})?(t.graphic||(t.graphic=this.chart.renderer.path().add(this.markerGroup).addClass("highcharts-point highcharts-color-"+pick(t.colorIndex,t.series.colorIndex))),t.graphic.attr({d:this.arrow(t),translateX:r,translateY:e,rotation:t.direction}),this.chart.styledMode||t.graphic.attr(this.pointAttribs(t))):t.graphic&&(t.graphic=t.graphic.destroy())},this)}pointAttribs(t,r){let e=this.options,i=t.color||this.color,o=this.options.lineWidth;return r&&(i=e.states[r].color||i,o=(e.states[r].lineWidth||o)+(e.states[r].lineWidthPlus||0)),{stroke:i,"stroke-width":o}}translate(){Series.prototype.translate.call(this),this.lengthMax=arrayMax(this.lengthData)}}VectorSeries.defaultOptions=merge(ScatterSeries.defaultOptions,{lineWidth:2,rotationOrigin:"center",states:{hover:{lineWidthPlus:1}},tooltip:{pointFormat:"<b>[{point.x}, {point.y}]</b><br/>Length: <b>{point.length}</b><br/>Direction: <b>{point.direction}Â°</b><br/>"},vectorLength:20},{marker:null}),extend(VectorSeries.prototype,{drawGraph:H.noop,getSymbol:H.noop,markerAttribs:H.noop,parallelArrays:["x","y","length","direction"],pointArrayMap:["y","length","direction"]}),SeriesRegistry.registerSeriesType("vector",VectorSeries);export default VectorSeries;