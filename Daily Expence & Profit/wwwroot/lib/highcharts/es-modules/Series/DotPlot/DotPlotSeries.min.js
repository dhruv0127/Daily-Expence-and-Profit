"use strict";import ColumnSeries from"../Column/ColumnSeries.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import U from"../../Core/Utilities.js";const{extend,merge,pick}=U;import"../Column/ColumnSeries.js";class DotPlotSeries extends ColumnSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}drawPoints(){const u=this,y=u.chart.renderer,e=this.options.marker,g=this.yAxis.transA*u.options.itemPadding,t=this.borderWidth,S=t%2?.5:1;this.points.forEach(function(i){let r,s,o,d,t=i.marker||{},n=t.symbol||e.symbol,a=pick(t.radius,e.radius),l,p,c="rect"!==n,h,m;if(i.graphics=o=i.graphics||[],delete(d=i.pointAttr?i.pointAttr[i.selected?"selected":""]||u.pointAttr[""]:u.pointAttribs(i,i.selected&&"select")).r,u.chart.styledMode&&(delete d.stroke,delete d["stroke-width"]),null!==i.y){i.graphic||(i.graphic=y.g("point").add(u.group)),p=pick(i.stackY,i.y),l=Math.min(i.pointWidth,u.yAxis.transA-g);let e=Math.floor(p);for(r=p;r>p-i.y;r--,e--){h=i.barX+(c?i.pointWidth/2-l/2:0),m=u.yAxis.toPixels(r,!0)+g/2,u.options.crisp&&(h=Math.round(h)-S,m=Math.round(m)+S),s={x:h,y:m,width:Math.round(c?l:i.pointWidth),height:Math.round(l),r:a};let t=o[e];t?t.animate(s):t=y.symbol(n).attr(extend(s,d)).add(i.graphic),t.isActive=!0,o[e]=t}}o.forEach((t,e)=>{t&&(t.isActive?t.isActive=!1:(t.destroy(),o.splice(e,1)))})})}}DotPlotSeries.defaultOptions=merge(ColumnSeries.defaultOptions,{itemPadding:.2,marker:{symbol:"circle",states:{hover:{},select:{}}}}),extend(DotPlotSeries.prototype,{markerAttribs:void 0}),SeriesRegistry.registerSeriesType("dotplot",DotPlotSeries);export default DotPlotSeries;