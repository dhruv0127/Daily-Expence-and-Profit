"use strict";import H from"../../Core/Globals.js";const noop=H["noop"];import Color from"../../Core/Color/Color.js";const color=Color["parse"];import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:{prototype:seriesProto},seriesTypes:{column:ColumnSeries}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{addEvent,clamp,defined,extend,find,isNumber,isObject,merge,pick}=U;import XRangeSeriesDefaults from"./XRangeSeriesDefaults.js";import XRangePoint from"./XRangePoint.js";const composedMembers=[];function onAxisAfterGetSeriesExtremes(){let t,e;if(this.isXAxis){t=pick(this.dataMax,-Number.MAX_VALUE);for(const i of this.series)if(i.x2Data)for(const s of i.x2Data)s&&s>t&&(t=s,e=!0);e&&(this.dataMax=t)}}class XRangeSeries extends ColumnSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}static compose(t){U.pushUnique(composedMembers,t)&&addEvent(t,"afterGetSeriesExtremes",onAxisAfterGetSeriesExtremes)}init(){super.init.apply(this,arguments),this.options.stacking=void 0}getColumnMetrics(){var t=()=>{for(const e of this.chart.series){var t=e.xAxis;e.xAxis=e.yAxis,e.yAxis=t}},e=(t(),super.getColumnMetrics());return t(),e}cropData(t,e,i,s){const r=seriesProto.cropData.call(this,this.x2Data,e,i,s);return r.xData=t.slice(r.start,r.end),r}findPointIndex(e){var t,{cropStart:i,points:s}=this;const r=e["id"];let o;return r&&(t=find(s,t=>t.id===r),o=t?t.index:void 0),void 0===o&&(t=find(s,t=>t.x===e.x&&t.x2===e.x2&&!t.touched),o=t?t.index:void 0),this.cropped&&isNumber(o)&&isNumber(i)&&o>=i&&(o-=i),o}alignDataLabel(t){var e=t.plotX;t.plotX=pick(t.dlBox&&t.dlBox.centerX,t.plotX),super.alignDataLabel.apply(this,arguments),t.plotX=e}translatePoint(t){const e=this.xAxis,i=this.yAxis,s=this.columnMetrics,r=this.options,o=r["borderRadius"],a=r.minPointLength||0,n=(t.shapeArgs&&t.shapeArgs.width||0)/2,l=this.pointXOffset=s.offset,p=pick(t.x2,t.x+(t.len||0));let h=t.plotX,c=e.translate(p,0,0,0,1);var d=Math.abs(c-h),m=this.chart.inverted,g=pick(r.borderWidth,1)%2/2;let x,u,f=s.offset,A=Math.round(s.width),b,y,R,v;a&&((x=a-d)<0&&(x=0),h-=x/2,c+=x/2),h=Math.max(h,-10),c=clamp(c,-10,e.len+10),defined(t.options.pointWidth)&&(f-=(Math.ceil(t.options.pointWidth)-A)/2,A=Math.ceil(t.options.pointWidth)),r.pointPlacement&&isNumber(t.plotY)&&i.categories&&(t.plotY=i.translate(t.y,0,1,0,1,r.pointPlacement));var S=Math.floor(Math.min(h,c))+g,C=Math.floor(Math.max(h,c))+g,g={x:S,y:Math.floor(t.plotY+f)+g,width:C-S,height:A};t.shapeArgs=g,isNumber(o)&&(t.shapeArgs.r=o),m?t.tooltipPos[1]+=l+n:t.tooltipPos[0]-=n+l-g.width/2,b=g.x,y=b+g.width,b<0||y>e.len?(b=clamp(b,0,e.len),R=(y=clamp(y,0,e.len))-b,t.dlBox=merge(g,{x:b,width:y-b,centerX:R?R/2:null})):t.dlBox=null;const M=t.tooltipPos;var C=m?1:0,S=m?0:1,X=this.columnMetrics?this.columnMetrics.offset:-s.width/2;m?M[C]+=g.width/2:M[C]=clamp(M[C]+(e.reversed?-1:0)*g.width,0,e.len-1),M[S]=clamp(M[S]+(m?-1:1)*X,0,i.len-1),(u=t.partialFill)&&(isObject(u)&&(u=u.amount),isNumber(u)||(u=0),isNumber(o)&&(t.partShapeArgs=merge(g,{r:o})),v=Math.max(Math.round(d*u+t.plotX-h),0),t.clipRectArgs={x:e.reversed?g.x+d-v:g.x,y:g.y,width:v,height:g.height})}translate(){super.translate.apply(this,arguments);for(const t of this.points)this.translatePoint(t)}drawPoint(t,e){const i=this.options,s=this.chart.renderer,r=t.shapeType,o=t.shapeArgs,a=t.partShapeArgs,n=t.clipRectArgs,l=(i.stacking&&i.borderRadius,t.state),p=i.states[l||"normal"]||{},h=void 0===l?"attr":e,c=this.pointAttribs(t,l),d=pick(this.chart.options.chart.animation,p.animation);let m=t.graphic,g=t.partialFill;t.isNull||!1===t.visible?m&&(t.graphic=m.destroy()):(m?m.rect[e](o):(t.graphic=m=s.g("point").addClass(t.getClassName()).add(t.group||this.group),m.rect=s[r](merge(o)).addClass(t.getClassName()).addClass("highcharts-partfill-original").add(m)),a&&(m.partRect?(m.partRect[e](merge(a)),m.partialClipRect[e](merge(n))):(m.partialClipRect=s.clipRect(n.x,n.y,n.width,n.height),m.partRect=s[r](a).addClass("highcharts-partfill-overlay").add(m).clip(m.partialClipRect))),this.chart.styledMode||(m.rect[e](c,d).shadow(i.shadow),a&&(isObject(g)||(g={}),e=(g=isObject(i.partialFill)?merge(i.partialFill,g):g).fill||color(c.fill).brighten(-.3).get()||color(t.color||this.color).brighten(-.3).get(),c.fill=e,m.partRect[h](c,d).shadow(i.shadow))))}drawPoints(){var t=this.getAnimationVerb();for(const e of this.points)this.drawPoint(e,t)}getAnimationVerb(){return this.chart.pointCount<(this.options.animationLimit||250)?"animate":"attr"}isPointInside(t){var e=t.shapeArgs,i=t.plotX,t=t.plotY;return e?void 0!==i&&void 0!==t&&0<=t&&t<=this.yAxis.len&&0<=(e.x||0)+(e.width||0)&&i<=this.xAxis.len:super.isPointInside.apply(this,arguments)}}XRangeSeries.defaultOptions=merge(ColumnSeries.defaultOptions,XRangeSeriesDefaults),extend(XRangeSeries.prototype,{pointClass:XRangePoint,cropShoulder:1,getExtremesFromAll:!0,parallelArrays:["x","x2","y"],requireSorting:!1,type:"xrange",animate:seriesProto.animate,autoIncrement:noop,buildKDTree:noop}),SeriesRegistry.registerSeriesType("xrange",XRangeSeries);export default XRangeSeries;