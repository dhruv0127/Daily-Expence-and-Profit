"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{treemap:TreemapSeries}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const{isNumber,isObject,merge}=U;var SunburstUtilities;!function(e){function a(e,i){let t=[],r;if(isNumber(e)&&isNumber(i)&&e<=i)for(r=e;r<=i;r++)t.push(r);return t}e.recursive=TreemapSeries.prototype.utils.recursive,e.calculateLevelSizes=function(e,i){let s,t=isObject(i)?i:{},u=0,l,r,n,o,f,c;return isObject(e)&&(s=merge({},e),f=isNumber(t.from)?t.from:0,c=isNumber(t.to)?t.to:0,r=a(f,c),n=Object.keys(s).filter(function(e){return-1===r.indexOf(+e)}),l=o=isNumber(t.diffRadius)?t.diffRadius:0,r.forEach(function(e){const i=s[e],t=i.levelSize.unit,r=i.levelSize.value;"weight"===t?u+=r:"percentage"===t?(i.levelSize={unit:"pixels",value:r/100*l},o-=i.levelSize.value):"pixels"===t&&(o-=r)}),r.forEach(function(e){var i=s[e];"weight"===i.levelSize.unit&&(i=i.levelSize.value,s[e].levelSize={unit:"pixels",value:i/u*o})}),n.forEach(function(e){s[e].levelSize={value:0,unit:"pixels"}})),s},e.getLevelFromAndTo=function({level:e,height:i}){return{from:0<e?e:1,to:e+i}},e.range=a}(SunburstUtilities=SunburstUtilities||{});export default SunburstUtilities;