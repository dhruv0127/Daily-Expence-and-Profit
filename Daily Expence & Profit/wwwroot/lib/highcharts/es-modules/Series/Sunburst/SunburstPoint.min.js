"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:{prototype:{pointClass:Point}},seriesTypes:{treemap:{prototype:{pointClass:TreemapPoint}}}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{correctFloat,extend}=U;class SunburstPoint extends TreemapPoint{constructor(){super(...arguments),this.node=void 0,this.options=void 0,this.series=void 0,this.shapeExisting=void 0,this.shapeType=void 0}getDataLabelPath(t){let e=this.series.chart.renderer,s=this.shapeExisting,a=s.start,r=s.end,i=a+(r-a)/2,o=i<0&&i>-Math.PI||i>Math.PI,h=s.r+(t.options.distance||0),n;return a===-Math.PI/2&&correctFloat(r)===correctFloat(1.5*Math.PI)&&(a=-Math.PI+Math.PI/360,r=-Math.PI/360,o=!0),r-a>Math.PI&&(o=!1,n=!0,r-a>2*Math.PI-.01&&(a+=.01,r-=.01)),this.dataLabelPath&&(this.dataLabelPath=this.dataLabelPath.destroy()),this.dataLabelPath=e.arc({open:!0,longArc:n?1:0}).attr({start:o?a:r,end:o?r:a,clockwise:+o,x:s.x,y:s.y,r:(h+s.innerR)/2}).add(e.defs),this.dataLabelPath}isValid(){return!0}}extend(SunburstPoint.prototype,{getClassName:Point.prototype.getClassName,haloPath:Point.prototype.haloPath,setState:Point.prototype.setState});export default SunburstPoint;