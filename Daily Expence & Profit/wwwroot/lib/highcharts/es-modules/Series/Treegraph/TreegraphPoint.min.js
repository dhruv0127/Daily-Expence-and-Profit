"use strict";import Point from"../../Core/Series/Point.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{treemap:{prototype:{pointClass:TreemapPoint}}}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const{addEvent,fireEvent,merge,pick}=U;class TreegraphPoint extends TreemapPoint{constructor(){super(...arguments),this.options=void 0,this.isLink=!1,this.series=void 0,this.node=void 0,this.setState=Point.prototype.setState}draw(){super.draw.apply(this,arguments);let t=this.graphic;t&&t.animate({visibility:this.visible?"inherit":"hidden"}),this.renderCollapseButton()}renderCollapseButton(){const t=this,e=t.series,o=t.graphic&&t.graphic.parentGroup,s=e.mapOptionsToLevel[t.node.level||0]||{},i=merge(e.options.collapseButton,s.collapseButton,t.options.collapseButton),{width:r,height:n,shape:l,style:a}=i,p=this.series.chart;var h,c,d;t.shapeArgs&&(this.collapseButtonOptions=i,t.collapseButton?t.node.children.length&&i.enabled?({x:h,y:c}=this.getCollapseBtnPosition(i),t.collapseButton.attr({text:t.collapsed?"+":"-",rotation:p.inverted?90:0,rotationOriginX:r/2,rotationOriginY:n/2}).animate({x:h,y:c,opacity:!t.visible||i.onlyOnHover&&"hover"!==t.state&&!t.collapsed?0:1})):(t.collapseButton.destroy(),delete t.collapseButton):t.node.children.length&&i.enabled&&({x:h,y:c}=this.getCollapseBtnPosition(i),d=i.fillColor||t.color||"#cccccc",t.collapseButton=p.renderer.label(t.collapsed?"+":"-",h,c,l).attr({height:n-4,width:r-4,padding:2,fill:d,rotation:p.inverted?90:0,rotationOriginX:r/2,rotationOriginY:n/2,stroke:i.lineColor||"#ffffff","stroke-width":i.lineWidth,"text-align":"center",align:"center",zIndex:1}).addClass("highcharts-tracker").addClass("highcharts-collapse-button").removeClass("highcharts-no-tooltip").css(merge({color:"string"==typeof d?p.renderer.getContrast(d):"#333333"},a)).add(o),t.collapseButton.element.point=t,i.onlyOnHover&&!t.collapsed&&t.collapseButton.attr({opacity:0})))}toggleCollapse(t){this.collapsed=pick(t,!this.collapsed),fireEvent(this.series,"toggleCollapse"),this.series.redraw()}destroy(){this.collapseButton&&(this.collapseButton.destroy(),delete this.collapseButton,this.collapseButton=void 0),super.destroy.apply(this,arguments)}getCollapseBtnPosition(t){var e=this.series.chart.inverted,o=t.width,s=t.height,{x:i=0,y:r=0,width:n=0,height:l=0}=this.shapeArgs||{};return{x:i+t.x+(e?.3*-s:n+-.3*o),y:r+l/2-s/2+t.y}}}addEvent(TreegraphPoint,"mouseOut",function(){const t=this.collapseButton,e=this.collapseButtonOptions;t&&e&&e.onlyOnHover&&!this.collapsed&&t.animate({opacity:0})}),addEvent(TreegraphPoint,"mouseOver",function(){this.collapseButton&&this.collapseButton.animate({opacity:1},this.series.options.states&&this.series.options.states.hover&&this.series.options.states.hover.animation)}),addEvent(TreegraphPoint,"click",function(){this.toggleCollapse()});export default TreegraphPoint;