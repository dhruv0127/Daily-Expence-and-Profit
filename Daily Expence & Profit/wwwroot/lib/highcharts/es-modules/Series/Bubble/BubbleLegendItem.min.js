"use strict";import Color from"../../Core/Color/Color.js";const color=Color["parse"];import F from"../../Core/FormatUtilities.js";import H from"../../Core/Globals.js";const noop=H["noop"];import U from"../../Core/Utilities.js";const{arrayMax,arrayMin,isNumber,merge,pick,stableSort}=U;class BubbleLegendItem{constructor(e,t){this.chart=void 0,this.legend=void 0,this.maxLabel=void 0,this.movementX=void 0,this.ranges=void 0,this.selected=void 0,this.visible=void 0,this.symbols=void 0,this.options=void 0,this.setState=noop,this.init(e,t)}init(e,t){this.options=e,this.visible=!0,this.chart=t.chart,this.legend=t}addToLegend(e){e.splice(this.options.legendIndex,0,this)}drawLegendSymbol(e){this.chart;const t=pick(e.options.itemDistance,20),s=this.legendItem||{},i=this.options,o=i.ranges,r=i.connectorDistance;let a;var n,l,h;o&&o.length&&isNumber(o[0].value)?(stableSort(o,function(e,t){return t.value-e.value}),this.ranges=o,this.setOptions(),this.render(),n=this.getMaxLabelSize(),h=2*(l=this.ranges[0].radius),a=0<(a=r-l+n.width)?a:0,this.maxLabel=n,this.movementX="left"===i.labels.align?a:0,s.labelWidth=h+a+t,s.labelHeight=h+n.height/2):e.options.bubbleLegend.autoRanges=!0}setOptions(){const s=this.ranges,i=this.options,o=this.chart.series[i.seriesIndex],r=this.legend.baseline,a={zIndex:i.zIndex,"stroke-width":i.borderWidth},n={zIndex:i.zIndex,"stroke-width":i.connectorWidth},l={align:this.legend.options.rtl||"left"===i.labels.align?"right":"left",zIndex:i.zIndex},h=o.options.marker.fillOpacity,c=this.chart.styledMode;s.forEach(function(e,t){c||(a.stroke=pick(e.borderColor,i.borderColor,o.color),a.fill=pick(e.color,i.color,1!==h?color(o.color).setOpacity(h).get("rgba"):o.color),n.stroke=pick(e.connectorColor,i.connectorColor,o.color)),s[t].radius=this.getRangeRadius(e.value),s[t]=merge(s[t],{center:s[0].radius-s[t].radius+r}),c||merge(!0,s[t],{bubbleAttribs:merge(a),connectorAttribs:merge(n),labelAttribs:l})},this)}getRangeRadius(e){const t=this.options,s=this.options.seriesIndex,i=this.chart.series[s],o=t.ranges[0].value,r=t.ranges[t.ranges.length-1].value,a=t.minSize,n=t.maxSize;return i.getRadius.call(this,r,o,a,n,e)}render(){const e=this.legendItem||{},t=this.chart.renderer,s=this.options.zThreshold;this.symbols||(this.symbols={connectors:[],bubbleItems:[],labels:[]}),e.symbol=t.g("bubble-legend"),e.label=t.g("bubble-legend-item"),e.symbol.translateX=0,e.symbol.translateY=0,e.symbol.add(e.label),e.label.add(e.group);for(const i of this.ranges)i.value>=s&&this.renderRange(i);this.hideOverlappingLabels()}renderRange(e){const t=this.ranges[0],s=this.legend,i=this.options,o=i.labels,r=this.chart,a=r.series[i.seriesIndex],n=r.renderer,l=this.symbols,h=l.labels,c=e.center,d=Math.abs(e.radius),b=i.connectorDistance||0,g=o.align,m=s.options.rtl,p=i.borderWidth,u=i.connectorWidth,x=t.radius||0,v=c-d-p/2+u/2,f=(v%1?1:.5)-(u%2?0:.5),y=n.styledMode;let z=m||"left"===g?-b:b;"center"===g&&(z=0,i.connectorDistance=0,e.labelAttribs.align="center"),l.bubbleItems.push(n.circle(x,c+f,d).attr(y?{}:e.bubbleAttribs).addClass((y?"highcharts-color-"+a.colorIndex+" ":"")+"highcharts-bubble-legend-symbol "+(i.className||"")).add(this.legendItem.symbol)),l.connectors.push(n.path(n.crispLine([["M",x,v],["L",x+z,v]],i.connectorWidth)).attr(y?{}:e.connectorAttribs).addClass((y?"highcharts-color-"+this.options.seriesIndex+" ":"")+"highcharts-bubble-legend-connectors "+(i.connectorClassName||"")).add(this.legendItem.symbol));const M=n.text(this.formatLabel(e)).attr(y?{}:e.labelAttribs).css(y?{}:o.style).addClass("highcharts-bubble-legend-labels "+(i.labels.className||"")).add(this.legendItem.symbol);e={x:x+z+i.labels.x,y:v+i.labels.y+.4*M.getBBox().height};M.attr(e),h.push(M),M.placed=!0,M.alignAttr=e}getMaxLabelSize(){const e=this.symbols.labels;let t,s;return e.forEach(function(e){s=e.getBBox(!0),t=!t||s.width>t.width?s:t}),t||{}}formatLabel(e){const t=this.options,s=t.labels.formatter,i=t.labels.format,o=this.chart["numberFormatter"];return i?F.format(i,e):s?s.call(e):o(e.value,1)}hideOverlappingLabels(){const e=this.chart,t=this.options.labels.allowOverlap,s=this.symbols;!t&&s&&(e.hideOverlappingLabels(s.labels),s.labels.forEach(function(e,t){e.newOpacity?e.newOpacity!==e.oldOpacity&&s.connectors[t].show():s.connectors[t].hide()}))}getRanges(){const e=this.legend.bubbleLegend,t=e.chart.series,s=e.options.ranges;let i,o,r=Number.MAX_VALUE,a=-Number.MAX_VALUE;return t.forEach(function(e){e.isBubble&&!e.ignoreSeries&&(o=e.zData.filter(isNumber)).length&&(r=pick(e.options.zMin,Math.min(r,Math.max(arrayMin(o),!1===e.options.displayNegative?e.options.zThreshold:-Number.MAX_VALUE))),a=pick(e.options.zMax,Math.max(a,arrayMax(o))))}),i=r===a?[{value:a}]:[{value:r},{value:(r+a)/2},{value:a,autoRanges:!0}],s.length&&s[0].radius&&i.reverse(),i.forEach(function(e,t){s&&s[t]&&(i[t]=merge(s[t],e))}),i}predictBubbleSizes(){const e=this.chart,t=e.legend.options,s=t.floating,i="horizontal"===t.layout,o=i?e.legend.lastLineHeight:0,r=e.plotSizeX,a=e.plotSizeY,n=e.series[this.options.seriesIndex],l=n.getPxExtremes(),h=Math.ceil(l.minPxSize),c=Math.ceil(l.maxPxSize),d=Math.min(a,r);let b,g=n.options.maxSize;return s||!/%$/.test(g)?b=c:(g=parseFloat(g),b=(d+o)*g/100/(g/100+1),(i&&a-b>=r||!i&&r-b>=a)&&(b=c)),[h,Math.ceil(b)]}updateRanges(e,t){const s=this.legend.options.bubbleLegend;s.minSize=e,s.maxSize=t,s.ranges=this.getRanges()}correctSizes(){const e=this.legend,t=this.chart,s=t.series[this.options.seriesIndex],i=s.getPxExtremes(),o=i.maxPxSize,r=this.options.maxSize;1<Math.abs(Math.ceil(o)-r)&&(this.updateRanges(this.options.minSize,i.maxPxSize),e.render())}}export default BubbleLegendItem;