"use strict";import LollipopPoint from"./LollipopPoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import Series from"../../Core/Series/Series.js";const{column:{prototype:colProto},dumbbell:{prototype:dumbbellProto},scatter:ScatterSeries}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const{extend,merge}=U;class LollipopSeries extends Series{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}drawPoints(){var o=this,e=o.points.length;let t=0,r;for(super.drawPoints.apply(o,arguments);t<e;)r=o.points[t],o.drawConnector(r),t++}}LollipopSeries.defaultOptions=merge(Series.defaultOptions,{threshold:0,connectorWidth:1,groupPadding:.2,pointPadding:.1,states:{hover:{lineWidthPlus:0,connectorWidthPlus:1,halo:!1}},lineWidth:0,dataLabels:{align:void 0,verticalAlign:void 0},pointRange:1}),extend(LollipopSeries.prototype,{alignDataLabel:colProto.alignDataLabel,crispCol:colProto.crispCol,drawConnector:dumbbellProto.drawConnector,drawDataLabels:colProto.drawDataLabels,getColumnMetrics:colProto.getColumnMetrics,getConnectorAttribs:dumbbellProto.getConnectorAttribs,pointClass:LollipopPoint,translate:colProto.translate}),SeriesRegistry.registerSeriesType("lollipop",LollipopSeries);export default LollipopSeries;