"use strict";import ColumnSeries from"../Column/ColumnSeries.js";const colProto=ColumnSeries["prototype"];import DumbbellPoint from"./DumbbellPoint.js";import H from"../../Core/Globals.js";const noop=H["noop"];import Series from"../../Core/Series/Series.js";const seriesProto=Series["prototype"];import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{arearange:AreaRangeSeries,columnrange:{prototype:columnRangeProto}}=SeriesRegistry["seriesTypes"],areaRangeProto=AreaRangeSeries["prototype"];import SVGRenderer from"../../Core/Renderer/SVG/SVGRenderer.js";import U from"../../Core/Utilities.js";const{extend,merge,pick}=U;class DumbbellSeries extends AreaRangeSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0,this.columnMetrics=void 0}getConnectorAttribs(o){let e=this,t=e.chart,r=o.options,s=e.options,i=e.xAxis,n=e.yAxis,l=pick(r.connectorWidth,s.connectorWidth),a=pick(r.connectorColor,s.connectorColor,r.color,o.zone?o.zone.color:void 0,o.color),p=pick(s.states&&s.states.hover&&s.states.hover.connectorWidthPlus,1),c=pick(r.dashStyle,s.dashStyle),h=pick(o.plotLow,o.plotY),d=n.toPixels(s.threshold||0,!0),m=t.inverted?n.len-d:d,g=pick(o.plotHigh,m),u,y;return"number"!=typeof h?{}:(o.state&&(l+=p),h<0?h=0:h>=n.len&&(h=n.len),g<0?g=0:g>=n.len&&(g=n.len),(o.plotX<0||o.plotX>i.len)&&(l=0),o.graphics&&o.graphics[1]&&(y={y:o.y,zone:o.zone},o.y=o.high,o.zone=o.zone?o.getZone():void 0,a=pick(r.connectorColor,s.connectorColor,r.color,o.zone?o.zone.color:void 0,o.color),extend(o,y)),u={d:SVGRenderer.prototype.crispLine([["M",o.plotX,h],["L",o.plotX,g]],l,"ceil")},t.styledMode||(u.stroke=a,u["stroke-width"]=l,c&&(u.dashstyle=c)),u)}drawConnector(o){var e=this,t=pick(e.options.animationLimit,250),t=o.connector&&e.chart.pointCount<t?"animate":"attr";o.connector||(o.connector=e.chart.renderer.path().addClass("highcharts-lollipop-stem").attr({zIndex:-1}).add(e.group)),o.connector[t](this.getConnectorAttribs(o))}getColumnMetrics(){const o=colProto.getColumnMetrics.apply(this,arguments);return o.offset+=o.width/2,o}translate(){const s=this.chart.inverted;this.setShapeArgs.apply(this),this.translatePoint.apply(this,arguments),this.points.forEach(o=>{const{pointWidth:e,shapeArgs:t={},tooltipPos:r}=o;o.plotX=t.x||0,t.x=o.plotX-e/2,r&&(s?r[1]=this.xAxis.len-o.plotX:r[0]=o.plotX)}),this.columnMetrics.offset-=this.columnMetrics.width/2}drawPoints(){let o=this,e=o.chart,t=o.points.length,r=o.lowColor=o.options.lowColor,s=0,i,n,l;for(this.seriesDrawPoints.apply(o,arguments);s<t;){const[a,p]=(n=o.points[s]).graphics||[];o.drawConnector(n),p&&(p.element.point=n,p.addClass("highcharts-lollipop-high")),n.connector.element.point=n,a&&(l=n.zone&&n.zone.color,i=pick(n.options.lowColor,r,n.options.color,l,n.color,o.color),e.styledMode||a.attr({fill:i}),a.addClass("highcharts-lollipop-low")),s++}}markerAttribs(){const o=areaRangeProto.markerAttribs.apply(this,arguments);return o.x=Math.floor(o.x||0),o.y=Math.floor(o.y||0),o}pointAttribs(o,e){let t;return t=seriesProto.pointAttribs.apply(this,arguments),"hover"===e&&delete t.fill,t}}DumbbellSeries.defaultOptions=merge(AreaRangeSeries.defaultOptions,{trackByArea:!1,fillColor:"none",lineWidth:0,pointRange:1,connectorWidth:1,stickyTracking:!1,groupPadding:.2,crisp:!1,pointPadding:.1,lowColor:"#333333",states:{hover:{lineWidthPlus:0,connectorWidthPlus:1,halo:!1}}}),extend(DumbbellSeries.prototype,{crispCol:colProto.crispCol,drawGraph:noop,drawTracker:ColumnSeries.prototype.drawTracker,pointClass:DumbbellPoint,setShapeArgs:columnRangeProto.translate,seriesDrawPoints:areaRangeProto.drawPoints,trackerGroups:["group","markerGroup","dataLabelsGroup"],translatePoint:areaRangeProto.translate}),SeriesRegistry.registerSeriesType("dumbbell",DumbbellSeries);export default DumbbellSeries;