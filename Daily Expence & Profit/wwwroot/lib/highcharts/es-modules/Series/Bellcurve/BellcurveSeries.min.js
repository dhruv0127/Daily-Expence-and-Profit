"use strict";import DerivedComposition from"../DerivedComposition.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{areaspline:AreaSplineSeries}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const{correctFloat,extend,isNumber,merge}=U;class BellcurveSeries extends AreaSplineSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}static mean(e){var t=e.length,e=e.reduce(function(e,t){return e+t},0);return 0<t&&e/t}static standardDeviation(e,r){var t=e.length;return r=isNumber(r)?r:BellcurveSeries.mean(e),e=e.reduce(function(e,t){t-=r;return e+t*t},0),1<t&&Math.sqrt(e/(t-1))}static normalDensity(e,t,r){e-=t;return Math.exp(-e*e/(2*r*r))/(r*Math.sqrt(2*Math.PI))}derivedData(e,t){let r=this.options.intervals,i=this.options.pointsInInterval,s=e-r*t,a=r*i*2+1,n=t/i,o=[],l;for(l=0;l<a;l++)o.push([s,BellcurveSeries.normalDensity(s,e,t)]),s+=n;return o}setDerivedData(){1<this.baseSeries.yData.length&&(this.setMean(),this.setStandardDeviation(),this.setData(this.derivedData(this.mean,this.standardDeviation),!1))}setMean(){this.mean=correctFloat(BellcurveSeries.mean(this.baseSeries.yData))}setStandardDeviation(){this.standardDeviation=correctFloat(BellcurveSeries.standardDeviation(this.baseSeries.yData,this.mean))}}BellcurveSeries.defaultOptions=merge(AreaSplineSeries.defaultOptions,{intervals:3,pointsInInterval:3,marker:{enabled:!1}}),DerivedComposition.compose(BellcurveSeries),SeriesRegistry.registerSeriesType("bellcurve",BellcurveSeries);export default BellcurveSeries;