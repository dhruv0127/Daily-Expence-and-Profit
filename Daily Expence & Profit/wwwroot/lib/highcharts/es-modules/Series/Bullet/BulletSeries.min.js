"use strict";import"../Column/ColumnSeries.js";import BulletPoint from"./BulletPoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const{extend,isNumber,merge,pick,relativeLength}=U;class BulletSeries extends ColumnSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0,this.targetData=void 0}drawPoints(){const u=this,h=u.chart,c=u.options,g=c.animationLimit||250;super.drawPoints.apply(this,arguments),u.points.forEach(function(e){var r=e.options,i=e.target,o=e.y;let s,a=e.targetGraphic,l,n,p,d;if(isNumber(i)&&null!==i){n=(p=merge(c.targetOptions,r.targetOptions)).height;let t=e.shapeArgs;e.dlBox&&t&&!isNumber(t.width)&&(t=e.dlBox),l=relativeLength(p.width,t.width),d=u.yAxis.translate(i,!1,!0,!1,!0)-p.height/2-.5,s=u.crispCol.apply({chart:h,borderWidth:p.borderWidth,options:{crisp:c.crisp}},[t.x+t.width/2-l/2,d,l,n]),a?(a[h.pointCount<g?"animate":"attr"](s),isNumber(o)&&null!==o?a.element.point=e:a.element.point=void 0):e.targetGraphic=a=h.renderer.rect().attr(s).add(u.group),h.styledMode||a.attr({fill:pick(p.color,r.color,u.zones.length&&(e.getZone.call({series:u,x:e.x,y:i,options:{}}).color||u.color)||void 0,e.color,u.color),stroke:pick(p.borderColor,e.borderColor,u.options.borderColor),"stroke-width":p.borderWidth,r:p.borderRadius}),isNumber(o)&&null!==o&&(a.element.point=e),a.addClass(e.getClassName()+" highcharts-bullet-target",!0)}else a&&(e.targetGraphic=a.destroy())})}getExtremes(t){const e=super.getExtremes.call(this,t),r=this.targetData;return r&&r.length&&(t=super.getExtremes.call(this,r),isNumber(t.dataMin)&&(e.dataMin=Math.min(pick(e.dataMin,1/0),t.dataMin)),isNumber(t.dataMax)&&(e.dataMax=Math.max(pick(e.dataMax,-1/0),t.dataMax))),e}}BulletSeries.defaultOptions=merge(ColumnSeries.defaultOptions,{targetOptions:{width:"140%",height:3,borderWidth:0,borderRadius:0},tooltip:{pointFormat:'<span style="color:{series.color}">‚óè</span> {series.name}: <b>{point.y}</b>. Target: <b>{point.target}</b><br/>'}}),extend(BulletSeries.prototype,{parallelArrays:["x","y","target"],pointArrayMap:["y","target"]}),BulletSeries.prototype.pointClass=BulletPoint,SeriesRegistry.registerSeriesType("bullet",BulletSeries);export default BulletSeries;