"use strict";import Color from"../../Core/Color/Color.js";import ColorMapComposition from"../ColorMapComposition.js";import HeatmapPoint from"./HeatmapPoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:Series,seriesTypes:{column:ColumnSeries,scatter:ScatterSeries}}=SeriesRegistry;import SVGRenderer from"../../Core/Renderer/SVG/SVGRenderer.js";const{symbols}=SVGRenderer["prototype"];import U from"../../Core/Utilities.js";const{extend,fireEvent,isNumber,merge,pick}=U;class HeatmapSeries extends ScatterSeries{constructor(){super(...arguments),this.colorAxis=void 0,this.data=void 0,this.options=void 0,this.points=void 0,this.valueMax=NaN,this.valueMin=NaN}drawPoints(){((this.options.marker||{}).enabled||this._hasPointMarkers)&&(Series.prototype.drawPoints.call(this),this.points.forEach(e=>{e.graphic&&(e.graphic[this.chart.styledMode?"css":"animate"](this.colorAttribs(e)),null===e.value&&e.graphic.addClass("highcharts-null-point"))}))}getExtremes(){var{dataMin:e,dataMax:t}=Series.prototype.getExtremes.call(this,this.valueData);return isNumber(e)&&(this.valueMin=e),isNumber(t)&&(this.valueMax=t),Series.prototype.getExtremes.call(this)}getValidPoints(e,t){return Series.prototype.getValidPoints.call(this,e,t,!0)}hasData(){return!!this.processedXData.length}init(){super.init.apply(this,arguments);const e=this.options;e.pointRange=pick(e.pointRange,e.colsize||1),this.yAxis.axisPointRange=e.rowsize||1,symbols.ellipse=symbols.circle,e.marker&&isNumber(e.borderRadius)&&(e.marker.r=e.borderRadius)}markerAttribs(e,t){var r,s=e.shapeArgs||{};return e.hasImage?{x:e.plotX,y:e.plotY}:t&&"normal"!==t?(e=e.options.marker||{},r=(r=this.options.marker||{}).states&&r.states[t]||{},t=((e=e.states&&e.states[t]||{}).width||r.width||s.width||0)+(e.widthPlus||r.widthPlus||0),e=(e.height||r.height||s.height||0)+(e.heightPlus||r.heightPlus||0),{x:(s.x||0)+((s.width||0)-t)/2,y:(s.y||0)+((s.height||0)-e)/2,width:t,height:e}):s}pointAttribs(e,t){const r=this,s=Series.prototype.pointAttribs.call(r,e,t),o=r.options||{},i=r.chart.options.plotOptions||{},a=i.series||{},l=i.heatmap||{},n=e&&e.options.borderColor||o.borderColor||l.borderColor||a.borderColor,p=e&&e.options.borderWidth||o.borderWidth||l.borderWidth||a.borderWidth||s["stroke-width"];return s.stroke=e&&e.marker&&e.marker.lineColor||o.marker&&o.marker.lineColor||n||this.color,s["stroke-width"]=p,t&&"normal"!==t&&(e=merge(o.states&&o.states[t],o.marker&&o.marker.states&&o.marker.states[t],e&&e.options.states&&e.options.states[t]||{}),s.fill=e.color||Color.parse(s.fill).brighten(e.brightness||0).get(),s.stroke=e.lineColor||s.stroke),s}translate(){const e=this,t=e.options,{borderRadius:l,marker:r}=t,n=r&&r.symbol||"rect",p=symbols[n]?n:"rect",h=-1!==["circle","square"].indexOf(p);e.generatePoints(),e.points.forEach(function(e){var t,r=e.getCellAttributes();let s=Math.min(r.x1,r.x2),o=Math.min(r.y1,r.y2),i=Math.max(Math.abs(r.x2-r.x1),0),a=Math.max(Math.abs(r.y2-r.y1),0);e.hasImage=0===(e.marker&&e.marker.symbol||n||"").indexOf("url"),h&&(t=Math.abs(i-a),s=Math.min(r.x1,r.x2)+(i<a?0:t/2),o=Math.min(r.y1,r.y2)+(i<a?t/2:0),i=a=Math.min(i,a)),e.hasImage&&(e.marker={width:i,height:a}),e.plotX=e.clientX=(r.x1+r.x2)/2,e.plotY=(r.y1+r.y2)/2,e.shapeType="path",e.shapeArgs=merge(!0,{x:s,y:o,width:i,height:a},{d:symbols[p](s,o,i,a,{r:isNumber(l)?l:0})})}),fireEvent(e,"afterTranslate")}}HeatmapSeries.defaultOptions=merge(ScatterSeries.defaultOptions,{animation:!1,borderRadius:0,borderWidth:0,nullColor:"#f7f7f7",dataLabels:{formatter:function(){const e=this.series.chart["numberFormatter"];var t=this.point["value"];return isNumber(t)?e(t,-1):""},inside:!0,verticalAlign:"middle",crop:!1,overflow:"allow",padding:0},marker:{symbol:"rect",radius:0,lineColor:void 0,states:{hover:{lineWidthPlus:0},select:{}}},clip:!0,pointRange:null,tooltip:{pointFormat:"{point.x}, {point.y}: {point.value}<br/>"},states:{hover:{halo:!1,brightness:.2}},legendSymbol:"rectangle"}),extend(HeatmapSeries.prototype,{axisTypes:ColorMapComposition.seriesMembers.axisTypes,colorKey:ColorMapComposition.seriesMembers.colorKey,directTouch:!0,getExtremesFromAll:!0,parallelArrays:ColorMapComposition.seriesMembers.parallelArrays,pointArrayMap:["y","value"],pointClass:HeatmapPoint,specialGroup:"group",trackerGroups:ColorMapComposition.seriesMembers.trackerGroups,alignDataLabel:ColumnSeries.prototype.alignDataLabel,colorAttribs:ColorMapComposition.seriesMembers.colorAttribs,getSymbol:Series.prototype.getSymbol}),ColorMapComposition.compose(HeatmapSeries),SeriesRegistry.registerSeriesType("heatmap",HeatmapSeries);export default HeatmapSeries;