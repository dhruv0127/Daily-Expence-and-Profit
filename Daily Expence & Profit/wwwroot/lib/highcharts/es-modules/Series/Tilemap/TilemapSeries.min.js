"use strict";import H from"../../Core/Globals.js";const noop=H["noop"];import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,heatmap:HeatmapSeries,scatter:ScatterSeries}=SeriesRegistry["seriesTypes"];import TilemapPoint from"./TilemapPoint.js";import TilemapShapes from"./TilemapShapes.js";import U from"../../Core/Utilities.js";const{extend,merge}=U;import"./TilemapComposition.js";class TilemapSeries extends HeatmapSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0,this.tileShape=void 0}alignDataLabel(){return this.tileShape.alignDataLabel.apply(this,Array.prototype.slice.call(arguments))}drawPoints(){ColumnSeries.prototype.drawPoints.call(this),this.points.forEach(e=>{e.graphic&&e.graphic[this.chart.styledMode?"css":"animate"](this.colorAttribs(e))})}getSeriesPixelPadding(e){var t,i=e.isXAxis,s=this.tileShape.getSeriesPadding(this);return s?(t=Math.round(e.translate(i?2*s.xPad:s.yPad,0,1,0,1)),s=Math.round(e.translate(i?s.xPad:0,0,1,0,1)),{padding:(e.single?Math.abs(t-s)/2:Math.abs(t-s))||0,axisLengthFactor:i?2:1.1}):{padding:0,axisLengthFactor:1}}setOptions(){var e=super.setOptions.apply(this,Array.prototype.slice.call(arguments));return this.tileShape=TilemapShapes[e.tileShape],e}translate(){return this.tileShape.translate.apply(this,Array.prototype.slice.call(arguments))}}TilemapSeries.defaultOptions=merge(HeatmapSeries.defaultOptions,{marker:null,states:{hover:{halo:{enabled:!0,size:2,opacity:.5,attributes:{zIndex:3}}}},pointPadding:2,tileShape:"hexagon"}),extend(TilemapSeries.prototype,{getSymbol:noop,markerAttribs:ScatterSeries.prototype.markerAttribs,pointAttribs:ColumnSeries.prototype.pointAttribs,pointClass:TilemapPoint}),SeriesRegistry.registerSeriesType("tilemap",TilemapSeries);export default TilemapSeries;