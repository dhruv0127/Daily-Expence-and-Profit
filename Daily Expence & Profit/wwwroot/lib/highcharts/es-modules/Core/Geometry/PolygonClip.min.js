"use strict";const isInside=(n,e,t)=>(e[0]-n[0])*(t[1]-n[1])>(e[1]-n[1])*(t[0]-n[0]),intersection=(n,e,t,i)=>{const s=[n[0]-e[0],n[1]-e[1]],o=[t[0]-i[0],t[1]-i[1]],l=n[0]*e[1]-n[1]*e[0],r=t[0]*i[1]-t[1]*i[0],c=1/(s[0]*o[1]-s[1]*o[0]),p=[(l*o[0]-r*s[0])*c,(l*o[1]-r*s[1])*c];return p.isIntersection=!0,p};var PolygonClip;!function(s){s.clipLineString=(n,e)=>{const t=[],i=s.clipPolygon(n,e,!1);for(let n=1;n<i.length;n++)i[n].isIntersection&&i[n-1].isIntersection&&(t.push(i.splice(0,n)),n=0),n===i.length-1&&t.push(i);return t},s.clipPolygon=(n,e,t=!0)=>{let i=e[e.length-1],s,o,l,r=n;for(let n=0;n<e.length;n++){var c=r;s=e[n],r=[],o=t?c[c.length-1]:c[0];for(let n=0;n<c.length;n++)l=c[n],isInside(i,s,l)?(isInside(i,s,o)||r.push(intersection(i,s,o,l)),r.push(l)):isInside(i,s,o)&&r.push(intersection(i,s,o,l)),o=l;i=s}return r}}(PolygonClip=PolygonClip||{});export default PolygonClip;