"use strict";import Math3D from"../Math3D.js";const perspective=Math3D["perspective"];import Series from"../Series/Series.js";import U from"../Utilities.js";const{addEvent,extend,merge,pick,isNumber}=U;class Series3D extends Series{translate(){super.translate.apply(this,arguments),this.chart.is3d()&&this.translate3dPoints()}translate3dPoints(){let t=this,s=t.options,e=t.chart,i=pick(t.zAxis,e.options.zAxis[0]),a=[],r,o,p,n,l,d=[],h=s.stacking?isNumber(s.stack)?s.stack:0:t.index||0;for(t.zPadding=h*(s.depth||0+(s.groupZPadding||1)),l=0;l<t.data.length;l++)r=t.data[l],i&&i.translate?(n=i.logarithmic&&i.val2lin?i.val2lin(r.z):r.z,r.plotZ=i.translate(n),r.isInside=!!r.isInside&&(n>=i.min&&n<=i.max)):r.plotZ=t.zPadding,r.axisXpos=r.plotX,r.axisYpos=r.plotY,r.axisZpos=r.plotZ,a.push({x:r.plotX,y:r.plotY,z:r.plotZ}),d.push(r.plotX||0);for(t.rawPointsX=d,o=perspective(a,e,!0),l=0;l<t.data.length;l++)r=t.data[l],p=o[l],r.plotX=p.x,r.plotY=p.y,r.plotZ=p.z}}Series3D.defaultOptions=merge(Series.defaultOptions),addEvent(Series,"afterTranslate",function(){this.chart.is3d()&&this.translate3dPoints()}),extend(Series.prototype,{translate3dPoints:Series3D.prototype.translate3dPoints});export default Series3D;